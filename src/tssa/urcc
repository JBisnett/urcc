#!/usr/bin/ruby

# Need GCC 4.2.x
Yourgcc = "/localdisk/gcc_build/bin/gcc"

# The main driver for our rcc

require "gimple/gimp2raw.rb"
require "gimple/raw2ast.rb"
require "CFG"
require "SSAPass"
require "TSSAPass"
#require "OptPass"

module Execute
  def execute( cmd )
    puts "#{cmd}"
    `#{cmd}`
  end
end

include Execute

def main
  filename = ARGV[0]
  noopt = (ARGV[1] == "notssa")
  if not filename or filename[-2..-1] != ".c" then
    puts "Please specify a C file."
    return
  end

  if not File.file?(filename) then
    puts "File #{filename} does not exist."
    return
  end
  
  # we need a way to determine the location of our own gcc
  gccversion = `#{Yourgcc} --version`
  if (gccversion =~ /\(GCC\) 4.2/) == nil
    puts "Please use GCC 4.2.2"
    puts "Only GCC 4.2.2 has been tested."
    return
  end
  
  execute "#{Yourgcc} -O0 -fdump-tree-gimple-raw -c #{filename}"
  
  filename = filename.split("/")[-1]
  execute "rm #{filename[0..-3]+".o"}"
  gimple_file = `ls #{filename}.*.gimple`.chop # chop "\n"
  prog = URCCFE.new(gimple_file).astroot

  ######################################################
  # Your optimizations need to play with "prog"
  # call your optimizations in CS255Opt::Run
  #CS255Opt.new(prog).Run(filename) 
  if noopt != true
	  cfg = CFG.new(prog)
	  ssa = SSAPass.new(cfg)
	  tssa = TSSAPass.new(cfg)
      print cfg.c_dump
      #opt = OptPass.new(cfg)
      cfg.update_prog
  #   print prog.c_dump
  end
  ######################################################
  
  c_file = filename[0..-3]+"_urcc.c" 
  file = File.new(c_file, "w")
  file << "#include \"tssa.h\"\n"
  file << "#include <stdio.h>\n"
  file << "#include <stdlib.h>\n"
  file << "\n"
  
  file << prog.c_dump 
  file.close

  #TODO: add support for specify binary file name by using "-o"
  binary_file = filename[0..-3]
  execute "g++ -g -O0 #{c_file} -o #{binary_file} -L./ -lpthread -ltssa"

  # enable the following lines if you do not want to keep 
  # intermediate files
  #`rm #{gimple_file}`
  #`rm #{c_file}`
end

main
